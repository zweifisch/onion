
(define (static handler prefix #!key root)
  (let ((prefix-shift (string-length prefix)))
    (lambda (req)
      (let ((path (alist-ref 'path req))
            (method (alist-ref 'method req)))
        (if (string-prefix? prefix path)
            (let ((realpath (string-append root (substring/shared path prefix-shift))))
              (if (file-exists? realpath)
                  (case method
                    ((GET)
                     (open-input-file realpath))
                    ((HEAD)
                     (void))
                    (else
                     (let ((response (alist-ref 'response req)))
                            (response-status-set! response 'method-not-allowed) "Method Not Allowed")))
                  (default-handler-404 req)))
            (handler req))))))

(define (render-response handler)
  (lambda (req)
    (let ((result (handler req))
          (res (alist-ref 'response req)))
      (cond ((string? result)
             (begin
               (set-content-type-if-missing res 'text/html)
               (write-response res)
               (write-string result #f (response-port res))
               (finish-response-body res)))
            ((or (list? result) (vector? result))
             (begin
               (set-content-type-if-missing res 'application/json)
               (write-response res)
               (write-json result (response-port res))
               (finish-response-body res)))
            ((port? result)
             (begin
               (set-content-type-if-missing res 'application/octet-stream)
               (write-response res)
               (copy-port result (response-port res))
               (finish-response-body res)))
            (else (write-response res))))))

(define (body-parser handler #!optional content-types)
  (lambda (req)
    (let* ((headers (alist-ref 'headers req))
           (content-type (header-value 'content-type headers))
           (content-length (header-value 'content-length headers))
           (request (alist-ref 'request req))
           (input (request-port request))
           (body (case content-type
                   ((application/json)
                    (read-json (read-string content-length input)
                               consume-trailing-whitespace: #f))
                   ((application/x-www-form-urlencoded)
                    (form-urldecode (read-string content-length input)))
                   ((multipart/form-data)
                    (read-multipart-form-data request))
                   (else input))))
      (handler (append `((body . ,body)) req)))))

(define (catch-errors handler)
  (lambda (req)
    (handle-exceptions ex
        (handler req)
      (let ((response (alist-ref 'response req)))
        (print "error")
        (response-status-set! response 'internal-server-error)
        "Internal Server Error"))))
